dim ps_pin_config(11)
dim ps_scan_mask(6)
dim ps_low_threshold(9)
dim ps_high_threshold(9)
dim len
dim result
dim data_init_flag



event system_boot(major ,minor ,patch ,build ,ll_version ,protocol_version, hw )
    call gap_set_mode(gap_general_discoverable,gap_undirected_connectable)
    call sm_set_bondable_mode(1)
   
    len = 11
    call flash_ps_load($8000)(result, len, ps_pin_config(0:11))      # load pin config from PS key storage $8000 in flash; up to 32 bytes may be
                                                                     #     stored in each key storage
    data_init_flag = ps_pin_config(10:1)                             # byte ($8000 + 10) stores the initialization flag
    if data_init_flag != 255  then                                   # the magic value of 255 is assigned to the flag when the data record is initialized
                                                                     # initializing non-initialized record with default values
        ps_pin_config(0:1) = 8                                       # P0 direction bit mask: 0 -- input, 1 -- output
        ps_pin_config(1:1) = 0                                       # P1 direction bit mask: 0 -- input, 1 -- output
        ps_pin_config(2:1) = 0                                       # P0 pull mask: 0 -- pull resistor connected, 1 -- pull resistor disconnected
        ps_pin_config(3:1) = 0                                       # P0 pull settings: 1 -- all pins pulled up, 0 -- all pins pulled down
        ps_pin_config(4:1) = 255                                     # P1 pull mask: 0 -- pull resistor connected, 1 -- pull resistor disconnected
        ps_pin_config(5:1) = 0                                       # P1 pull settings: 1 -- all pins pulled up, 0 -- all pins pulled down
        ps_pin_config(6:1) = 255                                     # P0 pins to set to some level, a mask
        ps_pin_config(7:1) = 0                                       # logical levels of P0 pins, a mask
        ps_pin_config(8:1) = 255                                     # P1 pins to set to some level, a mask
        ps_pin_config(9:1) = 0                                       # logical levels of P1 pins, a mask
        ps_pin_config(10:1) = 255                                    # the magic value of 255 is assigned to mark the ps_pin_config structure as initialized
        len = 11
        call flash_ps_save($8000, len, ps_pin_config(0:len))         # save the ps_pin_config structure
    end if
    call attributes_write(pin_config, 0, len, ps_pin_config(0:len))  # advertise ps_pin_config to the server. pin_config is found in the gatt.xml

    call hardware_io_port_config_function  (0, 0)                    # Configure Port 0 pins as general purpose IO pins           
    call hardware_io_port_config_function  (1, 0)                    # Configure Port 1 pins as general purpose IO pins

    call hardware_io_port_config_direction (0, ps_pin_config(0:1))   # apply ps_pin_config settings to the Port 0: input-output direction setting
    call hardware_io_port_config_direction (1, ps_pin_config(1:1))   # apply ps_pin_config settings to the Port 1: input-output direction setting

    call hardware_io_port_config_pull      (0, ps_pin_config(2:1), ps_pin_config(3:1))  # apply ps_pin_config serttings to the Port 0: the pull resistor
    call hardware_io_port_config_pull      (1, ps_pin_config(4:1), ps_pin_config(5:1))  # apply ps_pin_config serttings to the Port 1: the pull resistor

    call hardware_io_port_write            (0, ps_pin_config(6:1), ps_pin_config(7:1))  # apply ps_pin_config serttings to the Port 0: logical levels on pins
    call hardware_io_port_write            (1, ps_pin_config(8:1), ps_pin_config(9:1))  # apply ps_pin_config serttings to the Port 1: logical levels on pins

    len = 6
    call flash_ps_load($8001)(result, len, ps_scan_mask(0:6))        # load scan mask from PS key storage $8001 in flash; up to 32 bytes may be
                                                                     #     stored in each key storage
    data_init_flag = ps_scan_mask(5:1)                               # byte ($8001 + 5) stores the initialization flag for sthe can mask record
    if data_init_flag != 255  then                                   # the magic value of 255 is assigned to the flag when the data record is initialized
                                                                     # initializing scan mask with default values, ifvnot initialized
        ps_scan_mask(0:1) = 8                                        # byte 0: which bits of P0 are used (toggled) during the scan
        ps_scan_mask(1:1) = 8                                        # byte 1: what are the levels on each used pin when it is activated during the scan
        ps_scan_mask(2:1) = 0                                        # byte 2: which bits of P1 are used (toggled) during the scan
        ps_scan_mask(3:1) = 0                                        # byte 3: what are the levels on each used pin when it is activated during the scan
        ps_scan_mask(4:1) = 1 + 2 + 4 + 16 + 32                      # byte 4: which pins of P0 are used to measure voltage level on them using ADC
        ps_scan_mask(5:1) = 255                                      # byte 5: setting the data initialization flag to the magic value
        len = 6
        call flash_ps_save($8001, 6, ps_scan_mask(0:6))              # save the default value of the scan mask
    end if
    call attributes_write(scan_mask, 0, len, ps_scan_mask(0:len))    # copy the scan mask settings to the attribute, which is defined in gatt.xml

    len = 9
    call flash_ps_load($8002)(result, len, ps_low_threshold(0:9))    # load lower thresolds for scanning.
    data_init_flag = ps_low_threshold(8:1)
    if data_init_flag != 255  then
        ps_low_threshold(0:1) = 0
        ps_low_threshold(1:1) = 0
        ps_low_threshold(2:1) = 0
        ps_low_threshold(3:1) = 0
        ps_low_threshold(4:1) = 0
        ps_low_threshold(5:1) = 0
        ps_low_threshold(6:1) = 0
        ps_low_threshold(7:1) = 0
        ps_low_threshold(8:1) = 255
        len = 9
        call flash_ps_save($8002, len, ps_high_threshold(0:len))
    end if
    call attributes_write(ain_low_threshold, 0, len, ps_low_threshold(0:len))

    len = 9
    call flash_ps_load($8003)(result, len, ps_high_threshold(0:9))
    data_init_flag = ps_high_threshold(8:1)
    if data_init_flag != 255  then
        ps_high_threshold(0:1) = 80
        ps_high_threshold(1:1) = 80
        ps_high_threshold(2:1) = 80
        ps_high_threshold(3:1) = 80
        ps_high_threshold(4:1) = 80
        ps_high_threshold(5:1) = 80
        ps_high_threshold(6:1) = 80
        ps_high_threshold(7:1) = 80
        ps_high_threshold(8:1) = 255
        len = 9
        call flash_ps_save($8003, len, ps_high_threshold(0:len))
    end if
    call attributes_write(ain_high_threshold, 0, len, ps_high_threshold(0:len))


    call hardware_set_soft_timer(2048,0,0)                           # set a timer with handle 0, repeating each 2048/32000 = 0.064 sec
end

event connection_disconnected(handle,result)
    call gap_set_mode(gap_general_discoverable,gap_undirected_connectable)
end



event attributes_value(connection, reason, handle, offset, value_len, data)

    if handle = pin_config  then
        call flash_ps_save($8000, value_len, data(0:value_len))
        len = 11
        call flash_ps_load($8000)(result, len, ps_pin_config(0:11))

        call hardware_io_port_config_function  (0, 0)
        call hardware_io_port_config_function  (1, 0)

        call hardware_io_port_config_direction (0, ps_pin_config(0:1))
        call hardware_io_port_config_direction (1, ps_pin_config(1:1))

        call hardware_io_port_config_pull      (0, ps_pin_config(2:1), ps_pin_config(3:1))
        call hardware_io_port_config_pull      (1, ps_pin_config(4:1), ps_pin_config(5:1))

        call hardware_io_port_write            (0, ps_pin_config(6:1), ps_pin_config(7:1))
        call hardware_io_port_write            (1, ps_pin_config(8:1), ps_pin_config(9:1))
    end if

    if handle = scan_mask then
        call flash_ps_save($8001, value_len, data(0:value_len))
        len = 6
        call flash_ps_load($8001)(result, len, ps_scan_mask(0:6))
    end if

    if handle = ain_low_threshold then
        call flash_ps_save($8002, value_len, data(0:value_len))
        len = 9
        call flash_ps_load($8002)(result, len, ps_low_threshold(0:9))
    end if

    if handle = ain_high_threshold then
        call flash_ps_save($8003, value_len, data(0:value_len))
        len = 9
        call flash_ps_load($8003)(result, len, ps_high_threshold(0:9))
    end if

end





dim cur_scan_levels
dim p0_scan_pins
dim p0_scan_levels
dim p1_scan_pins
dim p1_scan_levels
dim p0_adc_read_pins

dim i
dim j
dim p
dim q

dim scan_res_index
dim scan_counter
dim scan_status_low
dim scan_status_high

dim xdebug1(8)
dim xdebug2(8)



event hardware_soft_timer(handle)

    if handle = 0 then
        p0_scan_pins   = ps_scan_mask(0:1)
        p0_scan_levels = ps_scan_mask(1:1)
        p1_scan_pins   = ps_scan_mask(2:1)
        p1_scan_levels = ps_scan_mask(3:1)

        p0_adc_read_pins = ps_scan_mask(4:1)

        scan_counter = 0
        scan_res_index = 0
        scan_status_low = 0
        scan_status_high = 0

        # scan port 0
        i = 0
        while i < 8
            p = (1 << i) & p0_scan_pins                              # p is the scan mask, with one bit set at the needed postiion
            if 0 != p  then                                          # the scan is only done if p0_scan_pins has the same bit set
                cur_scan_levels = (($FF ^ p0_scan_levels) & p0_scan_pins) | (p & p0_scan_levels)
                # switch off most of the pins and set the currently active one
                
                call hardware_io_port_write (0, p0_scan_pins, cur_scan_levels)
                #set the required levels on pins

                j = 0
                while j < 8
                  q = (1 << j) & p0_adc_read_pins
                  if q != 0  then
                      call hardware_adc_read(j, 3, 2)
                      scan_counter = scan_counter + 1
                  end if
                  j = j + 1
                end while

            end if
            i = i + 1
        end while
        cur_scan_levels = ($FF ^ p0_scan_levels) & p0_scan_pins
        call hardware_io_port_write (0, p0_scan_pins, cur_scan_levels)


        i = 0
        while i < 8
            p = (1 << i) & p1_scan_pins
            if 0 != p  then
                cur_scan_levels = (($FF ^ p1_scan_levels) & p1_scan_pins) | (p & p1_scan_levels)
                call hardware_io_port_write (1, p1_scan_pins, cur_scan_levels)

                j = 0
                while j < 8
                  q = (1 << j) & p0_adc_read_pins
                  if q != 0  then
                      call hardware_adc_read(j, 3, 2)
                      scan_counter = scan_counter + 1
                  end if
                  j = j + 1
                end while

            end if
            i = i + 1
        end while
        cur_scan_levels = ($FF ^ p1_scan_levels) & p1_scan_pins
        call hardware_io_port_write (1, p1_scan_pins, cur_scan_levels)

    end if

end



dim v

dim low_threshold
dim high_threshold

dim status_word(2)


event hardware_adc_result(input, value)

    v = value / 256
    if  v = 255 then
        v = 0
    end if
    
    if input = 0 then
        xdebug1(0:1) = v
        call attributes_write(debug1, 0, 8, xdebug1(0:8))
    end if

    if input = 1 then
        xdebug1(1:1) = v
        call attributes_write(debug1, 0, 8, xdebug1(0:8))
    end if

    if input = 2 then
        xdebug1(2:1) = v
        call attributes_write(debug1, 0, 8, xdebug1(0:8))
    end if
    
    if input = 3 then
        xdebug1(3:1) = v
        call attributes_write(debug1, 0, 8, xdebug1(0:8))
    end if

    if input = 4 then
        xdebug1(4:1) = v
        call attributes_write(debug1, 0, 8, xdebug1(0:8))
    end if

    if input = 5 then
        xdebug1(5:1) = v
        call attributes_write(debug1, 0, 8, xdebug1(0:8))
    end if


    if scan_counter > 0 then

        low_threshold = ps_low_threshold(scan_res_index:1)
        high_threshold = ps_high_threshold(scan_res_index:1)

        xdebug2(scan_res_index:1) = low_threshold
        call attributes_write(debug2, 0, 8, xdebug2(0:8))


        if v > high_threshold then
            scan_status_high = scan_status_high | (1 << scan_res_index)
        end if

        if v < low_threshold then
            scan_status_low = scan_status_low | (1 << scan_res_index)
        end if

        scan_res_index = scan_res_index + 1
        if scan_counter = scan_res_index then

            if (scan_status_high > 0) || (scan_status_low > 0) then
                status_word(0:1) = scan_status_high
                status_word(1:1) = scan_status_low
                # write the scan result into the attribute 'ain_triggers'
                call attributes_write(ain_triggers, 0, 2, status_word(0:2))
            end if

        end if
    end if

end
