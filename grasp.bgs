dim result
dim X0
dim X1
dim X2
dim X3
dim X4
dim X5
dim X6
dim X7
dim Xadc


dim output_pins
dim pull_pins
dim pull_direction
dim pins_to_set
dim levels_to_set
dim adc_read_pins

event system_boot(major ,minor ,patch ,build ,ll_version ,protocol_version, hw)

    X0 = 1
    X1 = 2
    X2 = 4
    X3 = 8
    X4 = 16
    X5 = 32
    X6 = 64
    X7 = 128
    Xadc = X0 + X1 + X2 + X3 + X4
    
    output_pins     = X5
    adc_read_pins   = Xadc
    pins_to_set     = Xadc + X5
    
    pull_pins       = (1*Xadc) + (0*X5)
    pull_direction  = 1  #1 == up
    levels_to_set   = (1*Xadc) + (0*X5)
    
    
    call gap_set_mode(gap_general_discoverable,gap_undirected_connectable)
    call sm_set_bondable_mode(1)
       
    
    call hardware_io_port_config_function  (0, 0)                    # Configure Port 0 pins as general purpose IO pins           
    call hardware_io_port_config_function  (1, 0)                    # Configure Port 1 pins as general purpose IO pins
    

    call hardware_io_port_config_direction (0, output_pins)   #which pins are output
    call hardware_io_port_config_pull      (0, 255 - pull_pins, pull_direction)  # which pins do not have a pull resistor; pull-up(1) or pull-down(0) for other pins
    call hardware_io_port_write            (0, pins_to_set, levels_to_set)  #pins to set; logical levels to set
    
    call hardware_io_port_config_direction (1, 0)   # apply ps_pin_config settings to the Port 1: input-output direction setting    
    call hardware_io_port_config_pull      (1, 255, 0)  # apply ps_pin_config serttings to the Port 1: the pull resistor   
    call hardware_io_port_write            (1, 255, 0)  # apply ps_pin_config serttings to the Port 1: logical levels on pins

    call hardware_set_soft_timer(2048,0,0)                           # set a timer with handle 0, repeating each 2048/32000 = 0.064 sec
end

event connection_disconnected(handle,res)
    call gap_set_mode(gap_general_discoverable,gap_undirected_connectable)
end


dim j
dim q

dim scan_res_index
dim scan_counter

dim xdebug1(8)
dim xdebug2(8)


event hardware_soft_timer(handle)

    if handle = 0 then
        scan_counter = 0
        scan_res_index = 0
      
        j = 0
        while j < 8                                          # ADC loop over passive pins in P0
          q = (1 << j) & adc_read_pins
          if q != 0  then
              #call hardware_adc_read(j, 3, 2)                # measure voltage on pin P0.j, get 12 bits of data, use VDD pin as a reference
              call hardware_adc_read(j, 3, 1)
              scan_counter = scan_counter + 1
          end if
          j = j + 1
        end while
    end if
end



dim v

dim scan_result_arr(8)

event hardware_adc_result(input, value)

    v = value / 256
    if  v > 128 then
        v = 0
    end if
    
    scan_result_arr (scan_res_index:1) = v
    
    if scan_counter > 0 then
        scan_res_index = scan_res_index + 1
        if scan_counter = scan_res_index then
                call attributes_write(scan_result, 0, 8, scan_result_arr(0:8))
                scan_result_arr(0:8) = 0
        end if
    end if

end
